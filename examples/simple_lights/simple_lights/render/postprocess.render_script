local render_helper = require "orthographic.render.helper"

local IDENTITY = vmath.matrix4()

local QUAD_PRED = nil

function init(self)
	self.tile_pred = render.predicate({"tile"})
	self.gui_pred = render.predicate({"gui"})
	self.text_pred = render.predicate({"text"})
	self.particle_pred = render.predicate({"particle"})

	QUAD_PRED = render.predicate({"quad"})
	
	self.quad_pred = render.predicate({"quad"})
	self.light_pred = render.predicate({"light"})
		
	self.clear_color = vmath.vector4(0, 0, 0, 0)
	self.clear_color.x = sys.get_config("render.clear_color_red", 0.1)
	self.clear_color.y = sys.get_config("render.clear_color_green", 0.3)
	self.clear_color.z = sys.get_config("render.clear_color_blue", 0.7)
	self.clear_color.w = sys.get_config("render.clear_color_alpha", 0)

	self.view = IDENTITY
	
	
	local color_params = { 
		format = render.FORMAT_RGBA,
		width = render.get_window_width(),
		height = render.get_window_height(),
		min_filter = render.FILTER_LINEAR,
		mag_filter = render.FILTER_LINEAR,
		u_wrap = render.WRAP_CLAMP_TO_EDGE,
		v_wrap = render.WRAP_CLAMP_TO_EDGE
	}
	
	local depth_params = {
		format = render.FORMAT_DEPTH,
		width = render.get_window_width(),
		height = render.get_window_height(),
		u_wrap = render.WRAP_CLAMP_TO_EDGE,
		v_wrap = render.WRAP_CLAMP_TO_EDGE
	}
	self.normal_rt = render.render_target("normal", {[render.BUFFER_COLOR_BIT] = color_params, [render.BUFFER_DEPTH_BIT] = depth_params })
	self.light_rt = render.render_target("light", {[render.BUFFER_COLOR_BIT] = color_params, [render.BUFFER_DEPTH_BIT] = depth_params })
	
	render_helper.init(self)
end


local function clear(color)
	render.set_depth_mask(true)
	render.set_stencil_mask(0xff)
	render.clear({[render.BUFFER_COLOR_BIT] = color, [render.BUFFER_DEPTH_BIT] = 1, [render.BUFFER_STENCIL_BIT] = 0})
end

local function render_to_world(self, predicates, constants)
	render_helper.set_world_view_projection(self)

	render.set_depth_mask(false)
	render.disable_state(render.STATE_DEPTH_TEST)
	render.disable_state(render.STATE_STENCIL_TEST)
	render.disable_state(render.STATE_CULL_FACE)
	render.enable_state(render.STATE_BLEND)
	render.set_blend_func(render.BLEND_SRC_ALPHA, render.BLEND_ONE_MINUS_SRC_ALPHA)

	for _,pred in ipairs(predicates) do
		render.draw(pred, constants)
	end
end

local function render_to_rt(self, render_target, render_fn)
	render.enable_render_target(render_target)
	render_fn(self)
	render.disable_render_target(render_target)
end


local function mix_to_quad(rt0, rt1)
	render.set_depth_mask(false)
	render.disable_state(render.STATE_DEPTH_TEST)
	render.disable_state(render.STATE_STENCIL_TEST)
	render.disable_state(render.STATE_CULL_FACE)
	render.enable_state(render.STATE_BLEND)
	render.set_blend_func(render.BLEND_SRC_ALPHA, render.BLEND_ONE_MINUS_SRC_ALPHA)

	render.enable_material(hash("mix_quad"))
	render.enable_texture(0, rt0, render.BUFFER_COLOR_BIT)
	render.enable_texture(1, rt1, render.BUFFER_COLOR_BIT)
	render.draw(QUAD_PRED)
	render.disable_texture(0, rt0)
	render.disable_texture(1, rt1)
	render.disable_material()
end

local function multiply_to_quad(rt0, rt1)
	render.set_depth_mask(false)
	render.disable_state(render.STATE_DEPTH_TEST)
	render.disable_state(render.STATE_STENCIL_TEST)
	render.disable_state(render.STATE_CULL_FACE)
	render.enable_state(render.STATE_BLEND)
	render.set_blend_func(render.BLEND_SRC_ALPHA, render.BLEND_ONE_MINUS_SRC_ALPHA)

	render.enable_material(hash("multiply_quad"))
	render.enable_texture(0, rt0, render.BUFFER_COLOR_BIT)
	render.enable_texture(1, rt1, render.BUFFER_COLOR_BIT)
	render.draw(QUAD_PRED)
	render.disable_texture(0, rt0)
	render.disable_texture(1, rt1)
	render.disable_material()
end

local function draw_to_quad(rt)
	render.set_depth_mask(false)
	render.disable_state(render.STATE_DEPTH_TEST)
	render.disable_state(render.STATE_STENCIL_TEST)
	render.disable_state(render.STATE_CULL_FACE)
	render.enable_state(render.STATE_BLEND)
	render.set_blend_func(render.BLEND_SRC_ALPHA, render.BLEND_ONE_MINUS_SRC_ALPHA)

	render.enable_material(hash("quad"))
	render.enable_texture(0, rt, render.BUFFER_COLOR_BIT)
	render.draw(QUAD_PRED)
	render.disable_texture(0, rt)
	render.disable_material()
end




local function render_to_quad(self, fn)
	render.set_view(IDENTITY)
	render.set_projection(IDENTITY)
	fn(self)
end

function update(self)
	render_helper.update(self)
	render.set_viewport(0, 0, render.get_window_width(), render.get_window_height())

	render_to_rt(self, self.normal_rt, function(self)
		clear(vmath.vector4(0, 0, 0, 1))
		render_to_world(self, { self.tile_pred, self.particle_pred })
	end)
	
	render_to_rt(self, self.light_rt, function(self)
		-- ambient light
		clear(vmath.vector4(0.1, 0.1, 0.1, 1.0))
		local constants = render.constant_buffer()
		constants.time = vmath.vector4(math.random(70, 100) / 100)
		render_to_world(self, { self.light_pred }, constants)
	end)

	render_to_quad(self, function(self)
		clear(vmath.vector4(0, 0, 0, 0))
		--draw_to_quad(self.normal_rt)
		--draw_to_quad(self.light_rt)
		multiply_to_quad(self.normal_rt, self.light_rt)
	end)

	-- gui
	render_helper.set_screen_view_projection(self)
	render.enable_state(render.STATE_STENCIL_TEST)
	render.draw(self.gui_pred)
	render.draw(self.text_pred)
	render.disable_state(render.STATE_STENCIL_TEST)
	render.set_depth_mask(false)
	render.draw_debug2d()
end

function on_message(self, message_id, message)
	render_helper.on_message(self, message_id, message, sender)
	if message_id == hash("clear_color") then
		self.clear_color = message.color
	end
end
