go.property("left", -110)
go.property("right", 110)
go.property("top", 20)
go.property("bottom", -25)

go.property("max_samples", 20)

local function clamp(x, min, max)
	if x < min then x = min elseif x > max then x = max end
	return x
end

function init(self)
	assert(self.max_samples > 0, "Max samples must be 1 or larger")

	msg.post(".", "acquire_input_focus")
	msg.post("@render:", "clear_color", { color = vmath.vector4(0.013, 0.173, 0.278, 1.000) })
	self.eye = vmath.vector3()
	self.layers = {}
	for _,id in pairs({ "foreground", "back", "far" }) do
		self.layers[id] = go.get_position(id).z
	end
	self.samples = {}
end

function update(self, dt)
	--print(self.eye)
	for id,depth in pairs(self.layers) do
		local offset = self.eye * depth * depth
		local pos = go.get_position(id)
		pos.x = offset.x
		pos.y = offset.y
		go.set_position(pos, id)
	end
end

function on_input(self, action_id, action)
	if action.acc_x and action.acc_y and action.acc_z then
		-- get a zero state
		-- portrait mode with phone rotated around x-axis
		local acc = vmath.vector3(action.acc_y, action.acc_z, action.acc_x) - vmath.vector3(-0.7, 0, 0)
		acc.x = clamp(acc.x, -0.3, 0.3) / 0.3

		-- sliding window of samples
		-- more samples = smoother
		-- more samples = more lag
		table.insert(self.samples, acc)
		if #self.samples > self.max_samples then
			table.remove(self.samples, 1)
		end

		-- calculate average
		local average = vmath.vector3(0)
		for _,sample in ipairs(self.samples) do
			average.x = average.x + sample.x
			average.y = average.y + sample.y
			average.z = average.z + sample.z
		end
		average.x = average.x / #self.samples
		average.y = average.y / #self.samples
		average.z = average.z / #self.samples

		-- limit to bounds
		local horizontal = average.z
		local vertical = average.x
		if vertical < 0 then
			self.eye.y = -vertical * self.top
		else
			self.eye.y = vertical * self.bottom
		end
		if horizontal < 0 then
			self.eye.x = -horizontal * self.left
		else
			self.eye.x = horizontal * self.right
		end
	elseif action_id == hash("touch") then
		if action.pressed then
			self.drag = true
			action.dx = 0
			action.dy = 0
		elseif action.released then
			self.drag = false
		end

		if self.drag then
			self.eye.x = self.eye.x + action.dx * 0.1
			self.eye.y = self.eye.y + action.dy * 0.1
		end
		self.eye.x = clamp(self.eye.x, self.left, self.right)
		self.eye.y = clamp(self.eye.y, self.bottom, self.top)
	end

end

function on_reload(self)
	-- Add reload-handling code here
	-- Remove this function if not needed
end
